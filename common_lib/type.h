/***************************************************************************************************
*                    (c) Copyright 1992-2008 Embedded Products Research Center
*                                       All Rights Reserved
*
*\File          type.h
*\Description   类型定义
*\Note
*\Log           2010.12.17    Ver 1.0    张波
*               创建文件。
***************************************************************************************************/
#ifndef _TYPE_H
#define _TYPE_H
#include "public_type.h"


#define Malloc  malloc
#define MemCpy  memcpy
#define MemSet  memset
#define MemCmp  memcmp
/***************************************************************************************************
*类型
***************************************************************************************************/

#ifdef NULL
#undef NULL
#endif

#define NULL 0  /*!<NULL的定义*/

/***************************************************************************************************
*值
***************************************************************************************************/

#define S8_MIN  (-127 - 1)  /*!<s8最小值定义*/
#define S8_MAX  127         /*!<s8最大值定义*/
#define U8_MAX  0xFF        /*!<u8最大值定义*/
#define S16_MIN (-32768)    /*!<s16最小值定义*/
#define S16_MAX 32767       /*!<s16最大值定义*/
#define U16_MAX 0xFFFF      /*!<u16最大值定义*/
#define S32_MIN (-2147483647L - 1)              /*!<s32最小值定义*/
#define S32_MAX 2147483647L                     /*!<s32最大值定义*/
#define U32_MAX 0xFFFFFFFF                      /*!<u32最大值定义*/
#define S64_MIN (-9223372036854775807LL - 1)    /*!<s64最小值定义*/
#define S64_MAX 9223372036854775807LL           /*!<s64最大值定义*/
#define U64_MAX 0xFFFFFFFFFFFFFFFF              /*!<u64最大值定义*/

/***************************************************************************************************
*程序结构
***************************************************************************************************/
#define DEAD_LOOP while(1)      /*!<while死循环定义*/

/***************************************************************************************************
*变参
***************************************************************************************************/
typedef u8* VaListType;     /*!<变参类型定义*/

#ifdef ADDRESS_OF
#undef ADDRESS_OF
#endif
#define ADDRESS_OF(v)   (&(v))  /*!<取地址定义*/

#ifdef INT_SIZEOF
#undef INT_SIZEOF
#endif
#define INT_SIZEOF(n)   \
    ((sizeof(n) + sizeof(int) - 1) & ~(sizeof(int) - 1))/*!<把n化为int所占字节大小的整数倍*/

#ifdef VA_START
#undef VA_START
#endif
#define VA_START(ap, v)  (ap = (u8*)ADDRESS_OF(v) + INT_SIZEOF(v))  /*!<获取变参的起始参数地址*/

#ifdef VA_ARG
#undef VA_ARG
#endif
#define VA_ARG(ap, t)    (*(t *)((ap += INT_SIZEOF(t)) - INT_SIZEOF(t)))/*!<获取参数地址*/

#ifdef VA_END
#undef VA_END
#endif
#define VA_END(ap)      (ap = (u8*)0)/*!<清空变参的参数地址*/

/***************************************************************************************************
*工具
***************************************************************************************************/
#ifdef offsetof
#undef offsetof
#endif
#define offsetof(s, m)      ((u32)&(((s*)0)->m))   /*!<获取结构类型中某成员的偏移*/
#define offsetofvar(s, m)   ((u32)(&(s).(m) - &(s)))     /*!<获取结构体变量中某成员的偏移*/
#define sizeofmember(s, m)  (sizeof((s*)0)->m)           /*!<获取结构体中某成员的宽度*/
#define countof(a)          (sizeof(a) / sizeof(a[0]))   /*!<获取数组的元素个数*/
#define numberof(a, p)      ((((u32)p) - ((u32)&(a[0]))) / sizeof(a[0])) /*!<获取当前元素在数组中的索引位置*/


/***************************************************************************************************
*宏
***************************************************************************************************/
#define ONE_KILO    (1024UL)                /*!<1K的定义*/
#define ONE_MEGA    (ONE_KILO * 1024)       /*!<1M的定义*/
#define ONE_GIGA    (ONE_MEGA * 1024)       /*!<1G的定义*/
#define ONE_TERA    (ONE_GIGA * 1024)       /*!<1T的定义*/
#define ONE_PETA    (ONE_TERA * 1024)       /*!<1P的定义*/
#define ONE_EXA     (ONE_PETA * 1024)       /*!<1E的定义*/
#define ONE_ZETA    (ONE_EXA * 1024)        /*!<1Z的定义*/
#define ONE_YOTTA   (ONE_ZETA * 1024)       /*!<1Y的定义*/
#define ONE_NONA    (ONE_YOTTA * 1024)      /*!<1N的定义*/
#define ONE_DOGGA   (ONE_DOGGA * 1024)      /*!<1D的定义*/

/***************************************************************************************************
*数组批量相同值宏
***************************************************************************************************/
#define V2(V)       (V),        (V)         /*!<2个值的定义*/
#define V4(V)       V2(V),      V2(V)       /*!<4个值的定义*/
#define V8(V)       V4(V),      V4(V)       /*!<8个值的定义*/
#define V16(V)      V8(V),      V8(V)       /*!<16个值的定义*/
#define V32(V)      V16(V),     V16(V)      /*!<32个值的定义*/
#define V64(V)      V32(V),     V32(V)      /*!<64个值的定义*/
#define V128(V)     V64(V),     V64(V)      /*!<128个值的定义*/
#define V256(V)     V128(V),    V128(V)     /*!<256个值的的定义*/
#define V512(V)     V256(V),    V256(V)     /*!<512个值的的定义*/
#define V1024(V)    V512(V),    V512(V)     /*!<1024个值的的定义*/
#define V2048(V)    V1024(V),   V1024(V)    /*!<2048个值的的定义*/
#define V4096(V)    V2048(V),   V2048(V)    /*!<4096个值的的定义*/
#define V8192(V)    V4096(V),   V4096(V)    /*!<8192个值的的定义*/
#define V16384(V)   V8192(V),   V8192(V)    /*!<16384个值的的定义*/
#define V32768(V)   V16384(V),  V16384(V)   /*!<32768个值的的定义*/
#define V65536(V)   V32768(V),  V32768(V)   /*!<65536个值的的定义*/
#define V131072(V)  V65536(V),  V65536(V)   /*!<131072个值的的定义*/
#define V262144(V)  V131072(V), V131072(V)  /*!<262144个值的的定义*/
#define V524288(V)  V262144(V), V262144(V)  /*!<524288个值的的定义*/
#define V1048576(V) V524288(V), V524288(V)  /*!<1048576个值的的定义*/
                                                  
#endif /*_TYPE_H*/                                
